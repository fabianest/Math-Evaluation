import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import UnivariateSpline
from sklearn.metrics import mean_squared_error
from scipy.stats import pearsonr

# Load WRF output data
wrf_df = pd.read_csv('bogota1wrf.csv', parse_dates=['Time'], encoding='ISO-8859-1')

# Load observation data
obs_df = pd.read_csv('bogota1obs.csv', parse_dates=['Time'], encoding='ISO-8859-1')

# Merge data on the 'Time' column to ensure alignment
merged_df = pd.merge(wrf_df, obs_df, on='Time', suffixes=('_wrf', '_obs'))

# Perform FDA smoothing
def fda_smoothing(data, smoothing_factor=0.01):
    time_numeric = np.arange(len(data))
    spline = UnivariateSpline(time_numeric, data, s=smoothing_factor)
    smoothed_data = spline(time_numeric)
    return smoothed_data

# Apply FDA smoothing to the variables
merged_df['Temperature (°C)_wrf_smooth'] = fda_smoothing(merged_df['Temperature (°C)_wrf'])
merged_df['Temperature (°C)_obs_smooth'] = fda_smoothing(merged_df['Temperature (°C)_obs'])
merged_df['Wind Speed (m/s)_wrf_smooth'] = fda_smoothing(merged_df['Wind Speed (m/s)_wrf'])
merged_df['Wind Speed (m/s)_obs_smooth'] = fda_smoothing(merged_df['Wind Speed (m/s)_obs'])
merged_df['Wind Direction (°)_wrf_smooth'] = fda_smoothing(merged_df['Wind Direction (°)_wrf'])
merged_df['Wind Direction (°)_obs_smooth'] = fda_smoothing(merged_df['Wind Direction (°)_obs'])

# Calculate metrics
def calculate_metrics(observed, simulated):
    mfb = 2 * (simulated - observed).mean() / (simulated.mean() + observed.mean()) * 100
    rmse = np.sqrt(mean_squared_error(observed, simulated))
    pearson_corr, _ = pearsonr(observed, simulated)
    return mfb, rmse, pearson_corr

# Display metrics, line plots, and scatter plots for Pearson's correlation
def display_metrics_and_plots(variable_name):
    mfb, rmse, pearson_corr = calculate_metrics(merged_df[f'{variable_name}_obs_smooth'], merged_df[f'{variable_name}_wrf_smooth'])

    print(f"Metrics for {variable_name} in Bogota:")
    print(f"Mean Fractional Bias (MFB): {mfb:.2f}%")
    print(f"Root Mean Square Error (RMSE): {rmse:.2f}")
    print(f"Pearson Correlation: {pearson_corr:.2f}")
    print()

    # Line plot: observed vs simulated
    plt.figure(figsize=(10, 5))
    plt.plot(merged_df['Time'], merged_df[f'{variable_name}_obs_smooth'], label='Observed', color='blue')
    plt.plot(merged_df['Time'], merged_df[f'{variable_name}_wrf_smooth'], label='Simulated', color='red')
    plt.title(f'{variable_name} (Smoothed) - Observed vs Simulated')
    plt.xlabel('Time')
    plt.ylabel(variable_name)
    plt.legend()
    plt.show()

    # Scatter plot: observed vs simulated for Pearson's correlation
    plt.figure(figsize=(7, 7))
    plt.scatter(merged_df[f'{variable_name}_obs_smooth'], merged_df[f'{variable_name}_wrf_smooth'], color='purple', edgecolor='black')
    plt.title(f'{variable_name} - Pearson Correlation Scatter Plot')
    plt.xlabel('Observed')
    plt.ylabel('Simulated')
    plt.plot(np.unique(merged_df[f'{variable_name}_obs_smooth']),
             np.poly1d(np.polyfit(merged_df[f'{variable_name}_obs_smooth'], merged_df[f'{variable_name}_wrf_smooth'], 1))(np.unique(merged_df[f'{variable_name}_obs_smooth'])),
             color='red')  # Line of best fit
    plt.grid(True)
    plt.show()

# Calculate and display metrics and plots for each variable
variables = ['Temperature (°C)', 'Wind Speed (m/s)', 'Wind Direction (°)']
for var in variables:
    display_metrics_and_plots(var)
